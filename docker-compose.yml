services:
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: healthcare_db
      POSTGRES_USER: healthcare_user
      POSTGRES_PASSWORD: healthcare_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthcare_user -d healthcare_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://healthcare_user:healthcare_password@postgres:5432/healthcare_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - JWT_ACCESS_TOKEN_LIFETIME=${JWT_ACCESS_TOKEN_LIFETIME:-15}
      - JWT_REFRESH_TOKEN_LIFETIME=${JWT_REFRESH_TOKEN_LIFETIME:-1440}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./auth-service:/app

  patient-service:
    build:
      context: ./patient-service
      dockerfile: Dockerfile
    expose:
      - "8002"
    environment:
      - DATABASE_SERVICE_URL=http://database-service:8004
      - AUTH_SERVICE_URL=http://auth-service:8001
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
    depends_on:
      - database-service
      - auth-service
    volumes:
      - ./patient-service:/app

  clinician-service:
    build:
      context: ./clinician-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_SERVICE_URL=http://database-service:8004
      - AUTH_SERVICE_URL=http://auth-service:8001
      - FILE_SERVICE_URL=http://file-service:8006
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
    depends_on:
      - database-service
      - auth-service
      - redis
    volumes:
      - ./clinician-service:/app
      - clinician-media:/app/media


  database-service:
    build:
      context: ./database-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://healthcare_user:healthcare_password@postgres:5432/healthcare_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./database-service:/app
      - ./cancer_types.json:/app/cancer_types.json:ro

  admin-service:
    build:
      context: ./admin-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_SERVICE_URL=http://database-service:8004
      - AUTH_SERVICE_URL=http://auth-service:8001
      - PATIENT_SERVICE_URL=http://patient-service:8002
      - CLINICIAN_SERVICE_URL=http://clinician-service:8003
      - FILE_SERVICE_URL=http://file-service:8006
      - RAG_EMBEDDING_SERVICE_URL=http://rag-embedding-service:8007
      - OCR_SERVICE_URL=http://ocr-service:8008
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
    depends_on:
      - database-service
      - auth-service
    volumes:
      - ./admin-service:/app

  file-service:
    build:
      context: ./file-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - DATABASE_SERVICE_URL=http://database-service:8004
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - FILE_STORAGE_PATH=/app/media/encrypted_files
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-100}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
    depends_on:
      - database-service
    volumes:
      - ./file-service:/app
      - file-storage:/app/media/encrypted_files

  rag-embedding-service:
    build:
      context: ./rag-embedding-service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    environment:
      - DATABASE_SERVICE_URL=http://database-service:8004
      - FILE_SERVICE_URL=http://file-service:8006
      - REDIS_URL=redis://redis:6379
      - DATABASE_SERVICE_TOKEN=${DATABASE_SERVICE_TOKEN:-db-service-secret-token}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      - RAG_CHUNK_SIZE=${RAG_CHUNK_SIZE:-1000}
      - RAG_CHUNK_OVERLAP=${RAG_CHUNK_OVERLAP:-200}
      - RAG_MAX_CONCURRENT_PROCESSING=${RAG_MAX_CONCURRENT_PROCESSING:-3}
      - RAG_PROCESSING_TIMEOUT=${RAG_PROCESSING_TIMEOUT:-300}
      - RAG_RETRY_MAX_ATTEMPTS=${RAG_RETRY_MAX_ATTEMPTS:-3}
      - RAG_RETRY_DELAY=${RAG_RETRY_DELAY:-60}
      - REDIS_DB=${REDIS_DB:-1}
    depends_on:
      - database-service
      - file-service
      - redis
    volumes:
      - ./rag-embedding-service:/app
      - rag-temp-files:/app/media/temp_files

  ocr-service:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    environment:
      - DATABASE_SERVICE_URL=http://database-service:8004
      - FILE_SERVICE_URL=http://file-service:8006
      - REDIS_URL=redis://redis:6379
      - DATABASE_SERVICE_TOKEN=${DATABASE_SERVICE_TOKEN:-db-service-secret-token}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - OCR_REDIS_DB=${OCR_REDIS_DB:-2}
      - OCR_MAX_FILE_SIZE_MB=${OCR_MAX_FILE_SIZE_MB:-50}
      - OCR_ALLOWED_EXTENSIONS=${OCR_ALLOWED_EXTENSIONS:-.txt,.rtf,.pdf,.jpg,.jpeg,.png,.bmp,.tiff}
      - OCR_GPU_THRESHOLD=${OCR_GPU_THRESHOLD:-0.5}
      - OCR_MODEL_GPU=${OCR_MODEL_GPU:-microsoft/trocr-large-printed}
      - OCR_MODEL_CPU=${OCR_MODEL_CPU:-microsoft/trocr-base-printed}
      - OCR_MAX_CONCURRENT_JOBS=${OCR_MAX_CONCURRENT_JOBS:-3}
      - OCR_JOB_TIMEOUT=${OCR_JOB_TIMEOUT:-300}
      - OCR_CLEANUP_DELAY=${OCR_CLEANUP_DELAY:-60}
      - OCR_PDF_DPI=${OCR_PDF_DPI:-400}
      - OCR_PDF_FORMAT=${OCR_PDF_FORMAT:-PNG}
    depends_on:
      - database-service
      - redis
    volumes:
      - ./ocr-service:/app
      - ocr-temp-files:/app/media/temp_files
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
              
  suggestion-service:
    build:
      context: ./suggestion-service
      dockerfile: Dockerfile
    ports:
      - "8009:8009"
    environment:
      - DATABASE_SERVICE_URL=http://database-service:8004/api/chat
      - AUTH_SERVICE_URL=http://auth-service:8001
      - FILE_SERVICE_URL=http://file-service:8006
      - REDIS_URL=redis://redis:6379
      - DATABASE_SERVICE_TOKEN=${DATABASE_SERVICE_TOKEN:-db-service-secret-token}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-ada-002}
      - SUGGESTION_CHUNK_SIZE=${SUGGESTION_CHUNK_SIZE:-1000}
    depends_on:
      - database-service
      - auth-service
    volumes:
      - ./suggestion-service:/app

  translation-service:
    build:
      context: ./translation-service
      dockerfile: Dockerfile
    container_name: translation_app
    ports:
      - "8010:8010"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AUTH_SERVICE_URL=http://auth-service:8001
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - TRANSLATION_SERVICE_TOKEN=${TRANSLATION_SERVICE_TOKEN}
    depends_on:
      - redis
      - auth-service
    volumes:
      - ./translation-service:/app
      - huggingface-cache:/home/appuser/.cache/huggingface

  worker:
    build:
      context: ./translation-service
      dockerfile: Dockerfile
    container_name: translator_worker
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    entrypoint: python worker.py
    depends_on:
      - redis
    volumes:
      - ./translation-service:/app
      - huggingface-cache:/home/appuser/.cache/huggingface

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - auth-service
      - patient-service
      - clinician-service
      - database-service
      - admin-service
      - file-service
      - rag-embedding-service
      - translation-service
      - ocr-service
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - clinician-media:/media
      - patient-static:/patient-static
      - auth-static:/auth-static
      - admin-static:/admin-static

  pgadmin:
    image: dpage/pgadmin4:9.5.0
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@healthcare.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

volumes:
  postgres_data:
  pgadmin_data:
  patient-static:
  auth-static:
  admin-static:
  file-storage:
  embedding-temp:
  huggingface-cache:
  rag-temp-files:
  clinician-media:
  ocr-temp-files:
